Patch from http://bugs.python.org/issue24054
(Merged upstream, but not yet in a release)

--- linecache2/tests/test_linecache.py	2015-03-06 12:26:17.000000000 +1100
+++ linecache2/tests/test_linecache.py	2015-08-10 10:49:25.538322314 +1000
@@ -13,8 +13,6 @@
 NONEXISTENT_FILENAME = FILENAME + '.missing'
 INVALID_NAME = '!@$)(!@#_1'
 EMPTY = ''
-TESTS = 'inspect_fodder inspect_fodder2 mapping_tests'
-TESTS = TESTS.split()
 TEST_PATH = os.path.dirname(__file__)
 MODULES = "linecache abc".split()
 MODULE_PATH = os.path.dirname(FILENAME)
@@ -40,7 +38,66 @@
 def f():
     return 3''' # No ending newline
 
 
+class TempFile:
+
+    def setUp(self):
+        super().setUp()
+        with tempfile.NamedTemporaryFile(delete=False) as fp:
+            self.file_name = fp.name
+            fp.write(self.file_byte_string)
+        self.addCleanup(support.unlink, self.file_name)
+
+
+class GetLineTestsGoodData(TempFile):
+    # file_list   = ['list\n', 'of\n', 'good\n', 'strings\n']
+
+    def setUp(self):
+        self.file_byte_string = ''.join(self.file_list).encode('utf-8')
+        super().setUp()
+
+    def test_getline(self):
+        with open(self.file_name) as fp:
+            for index, line in enumerate(fp):
+                if not line.endswith('\n'):
+                    line += '\n'
+
+                cached_line = linecache.getline(self.file_name, index + 1)
+                self.assertEqual(line, cached_line)
+
+    def test_getlines(self):
+        lines = linecache.getlines(self.file_name)
+        self.assertEqual(lines, self.file_list)
+
+
+class GetLineTestsBadData(TempFile):
+    # file_byte_string = b'Bad data goes here'
+
+    def test_getline(self):
+        self.assertRaises((SyntaxError, UnicodeDecodeError),
+                          linecache.getline, self.file_name, 1)
+
+    def test_getlines(self):
+        self.assertRaises((SyntaxError, UnicodeDecodeError),
+                          linecache.getlines, self.file_name)
+
+
+class EmptyFile(GetLineTestsGoodData, unittest.TestCase):
+    file_list = []
+
+
+class SingleEmptyLine(GetLineTestsGoodData, unittest.TestCase):
+    file_list = ['\n']
+
+
+class GoodUnicode(GetLineTestsGoodData, unittest.TestCase):
+    file_list = ['á\n', 'b\n', 'abcdef\n', 'ááááá\n']
+
+
+class BadUnicode(GetLineTestsBadData, unittest.TestCase):
+    file_byte_string = b'\x80abc'
+
+
 class LineCacheTests(unittest.TestCase):
 
     def setUp(self):
@@ -61,13 +118,6 @@
         self.assertEqual(getline(EMPTY, 1), EMPTY)
         self.assertEqual(getline(INVALID_NAME, 1), EMPTY)
 
-        # Check whether lines correspond to those from file iteration
-        for entry in TESTS:
-            filename = os.path.join(TEST_PATH, entry) + '.py'
-            with open(filename) as file:
-                for index, line in enumerate(file):
-                    self.assertEqual(line, getline(filename, index + 1))
-
         # Check module loading
         for entry in MODULES:
             filename = os.path.join(MODULE_PATH, entry) + '.py'
@@ -90,12 +140,13 @@
 
     def test_clearcache(self):
         cached = []
-        for entry in TESTS:
-            filename = os.path.join(TEST_PATH, entry) + '.py'
+        for entry in MODULES:
+            filename = os.path.join(MODULE_PATH, entry) + '.py'
             cached.append(filename)
             linecache.getline(filename, 1)
 
         # Are all files cached?
+        self.assertNotEqual(cached, [])
         cached_empty = [fn for fn in cached if fn not in linecache.cache]
         self.assertEqual(cached_empty, [])
 
--- linecache2/tests/inspect_fodder2.py	2015-01-13 15:08:38.000000000 +1100
+++ /dev/null	2015-05-31 17:33:43.420274337 +1000
@@ -1,124 +0,0 @@
-# line 1
-def wrap(foo=None):
-    def wrapper(func):
-        return func
-    return wrapper
-
-# line 7
-def replace(func):
-    def insteadfunc():
-        print('hello')
-    return insteadfunc
-
-# line 13
-@wrap()
-@wrap(wrap)
-def wrapped():
-    pass
-
-# line 19
-@replace
-def gone():
-    pass
-
-# line 24
-oll = lambda m: m
-
-# line 27
-tll = lambda g: g and \
-g and \
-g
-
-# line 32
-tlli = lambda d: d and \
-    d
-
-# line 36
-def onelinefunc(): pass
-
-# line 39
-def manyargs(arg1, arg2,
-arg3, arg4): pass
-
-# line 43
-def twolinefunc(m): return m and \
-m
-
-# line 47
-a = [None,
-     lambda x: x,
-     None]
-
-# line 52
-def setfunc(func):
-    globals()["anonymous"] = func
-setfunc(lambda x, y: x*y)
-
-# line 57
-def with_comment():  # hello
-    world
-
-# line 61
-multiline_sig = [
-    lambda x, \
-            y: x+y,
-    None,
-    ]
-
-# line 68
-def func69():
-    class cls70:
-        def func71():
-            pass
-    return cls70
-extra74 = 74
-
-# line 76
-def func77(): pass
-(extra78, stuff78) = 'xy'
-extra79 = 'stop'
-
-# line 81
-class cls82:
-    def func83(): pass
-(extra84, stuff84) = 'xy'
-extra85 = 'stop'
-
-# line 87
-def func88():
-    # comment
-    return 90
-
-# line 92
-def f():
-    class X:
-        def g():
-            "doc"
-            return 42
-    return X
-method_in_dynamic_class = f().g
-
-#line 101
-def keyworded(*arg1, arg2=1):
-    pass
-
-#line 105
-def annotated(arg1: list):
-    pass
-
-#line 109
-def keyword_only_arg(*, arg):
-    pass
-
-from functools import wraps
-
-def decorator(func):
-    @wraps(func)
-    def fake():
-        return 42
-    return fake
-
-#line 121
-@decorator
-def real():
-    return 20
